version: "3"

services:
  namenode:
    image: bde2020/hadoop-namenode:1.1.0-hadoop2.8-java8
    container_name: namenode
    volumes:
      - ./data/namenode:/hadoop/dfs/name
      - ./data/zeppelin/examples:/opt/sansa-examples
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"
      - "8020:8020"
#      - "8081:8081"

  datanode:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.8-java8
    container_name: datanode
    volumes:
      - ./data/datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    links:
      - namenode
    ports:
      - "50075:50075"

  spark-master:
    image: bde2020/spark-master:2.1.0-hadoop2.8-hive-java8
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - namenode
      - datanode
    links:
      - namenode
      - datanode

  spark-worker:
    image: bde2020/spark-worker:2.1.0-hadoop2.8-hive-java8
    container_name: spark-worker
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - SPARK_PUBLIC_DNS=localhost
    links:
      - spark-master

  hue:
    image: bde2020/hdfs-filebrowser:3.11
    container_name: hue
    ports:
      - 8088:8088
    environment:
      - NAMENODE_HOST=namenode
      - SPARK_MASTER=spark://spark-master:7077
    links:
      - spark-master

  zeppelin:
    image: bde2020/zeppelin:0.0.1-zeppelin-0.7.1-hadoop-2.8.0-spark-2.1.0
    container_name: zeppelin
    ports:
      - 80:8080
    volumes:
      - ./data:/data
      - ./data:/opt/zeppelin/data
  #    - ./data/zeppelin/conf:/opt/zeppelin/conf
      - ./data/zeppelin/logs:/opt/zeppelin/logs
      - ./data/zeppelin/notebooks:/opt/zeppelin/notebook
      - ./data/zeppelin/examples:/opt/sansa-examples
    environment:
      CORE_CONF_fs_defaultFS: "hdfs://namenode:8020"
      SPARK_MASTER: "spark://spark-master:7077"
      MASTER: "spark://spark-master:7077"
      SPARK_SUBMIT_OPTIONS: "--jars /opt/sansa-examples/jars/sansa-examples-spark.jar --conf spark.serializer=org.apache.spark.serializer.KryoSerializer"
    links:
      - spark-master

  hive-server:
    image: bde2020/hive
    container_name: hive-server
    env_file:
      - ./hadoop-hive.env
    environment:
      - "HIVE_CORE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://hive-metastore/metastore"
    links:
      - namenode
      - hive-metastore
    ports:
      - 10000:10000

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql
    container_name: hive-metastore-postgresql

  hive-metastore:
    image: bde2020/hive
    container_name: hive-metastore
    env_file:
      - ./hadoop-hive.env
    links:
      - namenode
      - hive-metastore-postgresql
    command: /opt/hive/bin/hive --service metastore
    ports:
      - 9083:9083

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - ./data/zookeeper:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - ./data/kafka:/var/lib/kafka
    links:
      - zookeeper
    depends_on:
      - zookeeper

  nifi:
    image: xemuliam/nifi
    container_name: nifi
    ports:
      - 5080:8080
      - 5443:8443
      - 5081:8081
## for scaling we have to do this
#      - 8080
    links:
      - zookeeper
      - kafka
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./data/nifi/conf:/opt/nifi/conf
      - ./data/nifi/logs:/opt/nifi/logs
      - ./data:/opt/datafiles
      - ./data/nifi:/opt/nifi/flowfile_repository
      - ./data/nifi:/opt/nifi/database_repository
      - ./data/nifi:/opt/nifi/content_repository
      - ./data/nifi:/opt/nifi/provenance_repository
    environment:
      ZK_NODES_LIST: zookeeper
      IS_CLUSTER_NODE: 1
      ELECTION_TIME: 1 min

  cassandra:
    image: docker.io/bitnami/cassandra:4.0
    container_name: cassandra
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - ./data/cassandra_data:/bitnami
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
#      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      - CASSANDRA_PASSWORD=cassandra



volumes:
  namenode:
  datanode:
  zookeeper:
  kafka:
  nifi:
  cassandra_data:
#    driver: local
